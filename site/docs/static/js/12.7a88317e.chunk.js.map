{"version":3,"sources":["../static/js/12.7a88317e.chunk.js","docs/zh-cn/introduction.md"],"names":["webpackJsonp","60","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU","file":"static/js/12.7a88317e.chunk.js","sourcesContent":["webpackJsonp([12],{\n\n/***/ 60:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<!-- <p align=\\\"center\\\"><img src=\\\"https://github.com/Tencent/omi/raw/master/assets/omi-logo2019.svg?sanitize=true\\\" alt=\\\"omi\\\" width=\\\"300\\\"/></p>\\n<h2 align=\\\"center\\\">Omi - 下一代前端框架，去万物糟粕，合精华为一点点 JS</h2>\\n<p align=\\\"center\\\"><b>基于 Web Components 并支持 IE8+(omio) 和 小程序(omip)</b></p>\\n -->\\n\\n## Omi 是什么？\\n\\nOmi (读音 /ˈomɪ/，类似于 欧米) 是跨框架框架，基于 Web Components 设计，也可以使用相同语法的 omio 兼容 IE8+。支持 PC Web、移动 H5 和小程序开发(One framework, Mobile & desktop & mini program)。\\n\\n\\n<em> Omi looks really neat!<br> </em>\\n　　　　— [Jason Miller (Creator of Preact)](https://twitter.com/_developit/)\\n\\n<em> I really like the trend towards \\\"frameworks\\\" that:<br><br>\\\"export default class WeElement extends HTMLElement {..}\\\"<br> <br>This one, Omi, is from Tencent.</em>       \\n　　　　— [Dion Almaer](https://twitter.com/dalmaer/)\\n\\n## 快速上手\\n\\n```jsx {8-11}\\nimport { render, WeElement, define } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  data = {\\n    count: 1\\n  }\\n\\n  static css = `\\n    span{\\n        color: red;\\n    }`\\n\\n  sub = () => {\\n    this.data.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.data.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={this.sub}>-</button>\\n        <span>{this.data.count}</span>\\n        <button onClick={this.add}>+</button>\\n      </div>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body')\\n```\\n\\n通过上面脚本的执行，你已经定义好了一个自定义标签，可以不使用 render 方法，直接使用 `my-counter` 标签：\\n\\n```jsx\\n<body>\\n  <my-counter></my-counter>\\n</body>\\n```\\n\\n看上面高亮的部分，可以给组件加样式，比如上面的 span 的作用域仅仅在组件内部，不会污染别的组件。到现在你已经成功入门 Omi 了！你学会了:\\n\\n* 为组件添加**结构**，如上面使用 JSX 书写结构\\n* 为组件添加**行为**，如上面的 `onClick` 绑定事件\\n* 为组件添加**样式**，如上面的 `static css`\\n* 渲染组件到 body，当然也可以把组件渲染到任意其他组件\\n\\n\\n## 无状态视图和 Store 系统\\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\nclass Store {\\n  data = {\\n    count: 1\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\ndefine('my-counter', _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n  </div>\\n), {\\n    use: ['count'], \\n    //or using useSelf, useSelf will update self only, exclude children components\\n    //useSelf: ['count'], \\n    css: `span { color: red; }`,\\n    installed() {\\n      console.log('installed')\\n    }\\n  })\\n\\nrender(<my-counter />, 'body', new Store)\\n```\\n\\n入门了，恭喜你！\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/12.7a88317e.chunk.js","module.exports = \"<!-- <p align=\\\"center\\\"><img src=\\\"https://github.com/Tencent/omi/raw/master/assets/omi-logo2019.svg?sanitize=true\\\" alt=\\\"omi\\\" width=\\\"300\\\"/></p>\\n<h2 align=\\\"center\\\">Omi - 下一代前端框架，去万物糟粕，合精华为一点点 JS</h2>\\n<p align=\\\"center\\\"><b>基于 Web Components 并支持 IE8+(omio) 和 小程序(omip)</b></p>\\n -->\\n\\n## Omi 是什么？\\n\\nOmi (读音 /ˈomɪ/，类似于 欧米) 是跨框架框架，基于 Web Components 设计，也可以使用相同语法的 omio 兼容 IE8+。支持 PC Web、移动 H5 和小程序开发(One framework, Mobile & desktop & mini program)。\\n\\n\\n<em> Omi looks really neat!<br> </em>\\n　　　　— [Jason Miller (Creator of Preact)](https://twitter.com/_developit/)\\n\\n<em> I really like the trend towards \\\"frameworks\\\" that:<br><br>\\\"export default class WeElement extends HTMLElement {..}\\\"<br> <br>This one, Omi, is from Tencent.</em>       \\n　　　　— [Dion Almaer](https://twitter.com/dalmaer/)\\n\\n## 快速上手\\n\\n```jsx {8-11}\\nimport { render, WeElement, define } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  data = {\\n    count: 1\\n  }\\n\\n  static css = `\\n    span{\\n        color: red;\\n    }`\\n\\n  sub = () => {\\n    this.data.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.data.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={this.sub}>-</button>\\n        <span>{this.data.count}</span>\\n        <button onClick={this.add}>+</button>\\n      </div>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body')\\n```\\n\\n通过上面脚本的执行，你已经定义好了一个自定义标签，可以不使用 render 方法，直接使用 `my-counter` 标签：\\n\\n```jsx\\n<body>\\n  <my-counter></my-counter>\\n</body>\\n```\\n\\n看上面高亮的部分，可以给组件加样式，比如上面的 span 的作用域仅仅在组件内部，不会污染别的组件。到现在你已经成功入门 Omi 了！你学会了:\\n\\n* 为组件添加**结构**，如上面使用 JSX 书写结构\\n* 为组件添加**行为**，如上面的 `onClick` 绑定事件\\n* 为组件添加**样式**，如上面的 `static css`\\n* 渲染组件到 body，当然也可以把组件渲染到任意其他组件\\n\\n\\n## 无状态视图和 Store 系统\\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\nclass Store {\\n  data = {\\n    count: 1\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\ndefine('my-counter', _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n  </div>\\n), {\\n    use: ['count'], \\n    //or using useSelf, useSelf will update self only, exclude children components\\n    //useSelf: ['count'], \\n    css: `span { color: red; }`,\\n    installed() {\\n      console.log('installed')\\n    }\\n  })\\n\\nrender(<my-counter />, 'body', new Store)\\n```\\n\\n入门了，恭喜你！\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/introduction.md\n// module id = 60\n// module chunks = 12"],"sourceRoot":""}